// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Wego.Persistence.EF;

#nullable disable

namespace Wego.Persistence.Migrations
{
    [DbContext(typeof(PortoDbContext))]
    partial class PortoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OfferSkill", b =>
                {
                    b.Property<long>("SkillId")
                        .HasColumnType("bigint");

                    b.Property<long>("OfferId")
                        .HasColumnType("bigint");

                    b.HasKey("SkillId", "OfferId")
                        .HasName("PK_OfferCategories");

                    b.HasIndex("OfferId");

                    b.ToTable("OfferSkills", (string)null);
                });

            modelBuilder.Entity("Wego.Domain.Entities.BusinessSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BusinessSkills", "config");
                });

            modelBuilder.Entity("Wego.Domain.Entities.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short?>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Code" }, "AK_Unique_Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("Categories", "config");
                });

            modelBuilder.Entity("Wego.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrincipalCityCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Cities", "config");
                });

            modelBuilder.Entity("Wego.Domain.Entities.ContractType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_ContractType");

                    b.ToTable("ContractTypes", "config");
                });

            modelBuilder.Entity("Wego.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Countries", "config");
                });

            modelBuilder.Entity("Wego.Domain.Entities.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Wego.Domain.Entities.DocVisibility", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("DocId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsNowVisible")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserProfileId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PK__DocVisib__3214EC07263E13BE");

                    b.HasIndex(new[] { "DocId" }, "UQ__DocVisib__3EF188ACE3774004")
                        .IsUnique()
                        .HasFilter("[DocId] IS NOT NULL");

                    b.ToTable("DocVisibility", "profile");
                });

            modelBuilder.Entity("Wego.Domain.Entities.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ContentType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DocName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Extension")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("UserProfileId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PK__Document__3214EC07E28C52AA");

                    b.HasIndex(new[] { "UserProfileId" }, "UQ__Document__9E267F635CEF096B")
                        .IsUnique();

                    b.ToTable("Documents", "profile");
                });

            modelBuilder.Entity("Wego.Domain.Entities.Experience", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CompanyName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EndMounth")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("EndYear")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Skills")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StartMounth")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("UserProfileId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PK__Experien__3214EC0712A2554F");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Experiences", "profile");
                });

            modelBuilder.Entity("Wego.Domain.Entities.ExperienceYear", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int?>("Years")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_ExperienceLevels");

                    b.ToTable("ExperienceYears", "config");
                });

            modelBuilder.Entity("Wego.Domain.Entities.FrancoCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("FrancoCountries", "config");
                });

            modelBuilder.Entity("Wego.Domain.Entities.JobLevel", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("JobLevel", "config");
                });

            modelBuilder.Entity("Wego.Domain.Entities.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Laguage")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Level")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("UserProfileId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PK_About");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Languages", "profile");
                });

            modelBuilder.Entity("Wego.Domain.Entities.LocationsSearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IdRef")
                        .HasColumnType("int");

                    b.Property<bool?>("IsPriority")
                        .HasColumnType("bit");

                    b.Property<short>("LocationType")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ParentName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.ToTable("LocationsSearch");
                });

            modelBuilder.Entity("Wego.Domain.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Application")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Environment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ip")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("IP");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StackTrace")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("TimeStamp")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Wego.Domain.Entities.Offer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CatgeoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ContractTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedUserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<long?>("ExperienceYearId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("SalaryMax")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal?>("SalaryMin")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("SearchPreference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedUserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("WorkTypeId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ZipCodeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CatgeoryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ExperienceYearId");

                    b.HasIndex("WorkTypeId");

                    b.HasIndex("ZipCodeId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("Wego.Domain.Entities.OffersSearch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("AmountMax")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal?>("AmountMin")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("AmountUnit")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("BusinessSkillCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BusinessSkillName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CategoryCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CatgeoryName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContractTypeCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContractTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("ExperienceYear")
                        .HasColumnType("int");

                    b.Property<string>("JobLevelCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("JobLevelName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LocationCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LocationName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<short?>("RemoteDays")
                        .HasColumnType("smallint");

                    b.Property<string>("SearchKeys")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SkillCodes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SkillNames")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WorkTypeCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WorkTypeName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OffersSearch");
                });

            modelBuilder.Entity("Wego.Domain.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Regions", "config");
                });

            modelBuilder.Entity("Wego.Domain.Entities.Skill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_config.Skills");

                    b.ToTable("Skills", "config");
                });

            modelBuilder.Entity("Wego.Domain.Entities.TrainShip", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Diploma")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("UserProfileId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__TrainShi__3214EC07EC1EEEC2");

                    b.HasIndex("UserProfileId");

                    b.ToTable("TrainShip", "profile");
                });

            modelBuilder.Entity("Wego.Domain.Entities.UserProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Adress")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CategoryType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Completion")
                        .HasColumnType("int");

                    b.Property<string>("ContractType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActif")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVisible")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("LastName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Position")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Region")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Skills")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UsId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id")
                        .HasName("PK__UserProf__3214EC073DC57FDB");

                    b.HasIndex(new[] { "UsId" }, "unqiue_usid")
                        .IsUnique()
                        .HasFilter("[UsId] IS NOT NULL");

                    b.ToTable("UserProfiles", "profile");
                });

            modelBuilder.Entity("Wego.Domain.Entities.UserVisibility", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsVisble")
                        .HasColumnType("bit")
                        .HasColumnName("isVisble");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("UserProfileId")
                        .HasColumnType("bigint")
                        .HasColumnName("userProfileId");

                    b.HasKey("Id")
                        .HasName("PK__UserVisi__3213E83FC86C941F");

                    b.HasIndex("UserProfileId");

                    b.ToTable("UserVisibility", "profile");
                });

            modelBuilder.Entity("Wego.Domain.Entities.WorkType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_config.WorkType");

                    b.ToTable("WorkTypes", "config");
                });

            modelBuilder.Entity("Wego.Domain.Entities.ZipCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gps")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameSecondary")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ZipCode1")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ZipCode");

                    b.Property<string>("ZipCodeSecondary")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("ZipCodes", "config");
                });

            modelBuilder.Entity("OfferSkill", b =>
                {
                    b.HasOne("Wego.Domain.Entities.Offer", null)
                        .WithMany()
                        .HasForeignKey("OfferId")
                        .IsRequired()
                        .HasConstraintName("FK_OfferSkills_Offers");

                    b.HasOne("Wego.Domain.Entities.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .IsRequired()
                        .HasConstraintName("FK_OfferSkills_Skills");
                });

            modelBuilder.Entity("Wego.Domain.Entities.City", b =>
                {
                    b.HasOne("Wego.Domain.Entities.ZipCode", "IdNavigation")
                        .WithOne("City")
                        .HasForeignKey("Wego.Domain.Entities.City", "Id")
                        .IsRequired()
                        .HasConstraintName("FK_Cities_ZipCodes");

                    b.HasOne("Wego.Domain.Entities.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("FK_Cities_Regions");

                    b.Navigation("IdNavigation");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Wego.Domain.Entities.DocVisibility", b =>
                {
                    b.HasOne("Wego.Domain.Entities.Document", "Doc")
                        .WithOne("DocVisibility")
                        .HasForeignKey("Wego.Domain.Entities.DocVisibility", "DocId")
                        .HasConstraintName("FK__DocVisibi__DocId__07E124C1");

                    b.Navigation("Doc");
                });

            modelBuilder.Entity("Wego.Domain.Entities.Document", b =>
                {
                    b.HasOne("Wego.Domain.Entities.UserProfile", "UserProfile")
                        .WithOne("Document")
                        .HasForeignKey("Wego.Domain.Entities.Document", "UserProfileId")
                        .IsRequired()
                        .HasConstraintName("FK_userprofile_documents");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Wego.Domain.Entities.Experience", b =>
                {
                    b.HasOne("Wego.Domain.Entities.UserProfile", "UserProfile")
                        .WithMany("Experiences")
                        .HasForeignKey("UserProfileId")
                        .IsRequired()
                        .HasConstraintName("FK__Experienc__UserP__08D548FA");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Wego.Domain.Entities.Language", b =>
                {
                    b.HasOne("Wego.Domain.Entities.UserProfile", "UserProfile")
                        .WithMany("Languages")
                        .HasForeignKey("UserProfileId")
                        .IsRequired()
                        .HasConstraintName("FK__Languages__UserP__09C96D33");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Wego.Domain.Entities.Offer", b =>
                {
                    b.HasOne("Wego.Domain.Entities.Category", "Catgeory")
                        .WithMany("Offers")
                        .HasForeignKey("CatgeoryId")
                        .HasConstraintName("FK_Offers_Categories");

                    b.HasOne("Wego.Domain.Entities.ContractType", "CatgeoryNavigation")
                        .WithMany("Offers")
                        .HasForeignKey("CatgeoryId")
                        .HasConstraintName("FK_Offers_ContractType");

                    b.HasOne("Wego.Domain.Entities.Customer", "Customer")
                        .WithMany("Offers")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Offers_Customers");

                    b.HasOne("Wego.Domain.Entities.ExperienceYear", "ExperienceYear")
                        .WithMany("Offers")
                        .HasForeignKey("ExperienceYearId")
                        .HasConstraintName("FK_Offers_ExperienceLevels");

                    b.HasOne("Wego.Domain.Entities.WorkType", "WorkType")
                        .WithMany("Offers")
                        .HasForeignKey("WorkTypeId")
                        .HasConstraintName("FK_Offers_WorkType");

                    b.HasOne("Wego.Domain.Entities.ZipCode", "ZipCode")
                        .WithMany("Offers")
                        .HasForeignKey("ZipCodeId")
                        .HasConstraintName("FK_Offers_ZipCodes");

                    b.Navigation("Catgeory");

                    b.Navigation("CatgeoryNavigation");

                    b.Navigation("Customer");

                    b.Navigation("ExperienceYear");

                    b.Navigation("WorkType");

                    b.Navigation("ZipCode");
                });

            modelBuilder.Entity("Wego.Domain.Entities.Region", b =>
                {
                    b.HasOne("Wego.Domain.Entities.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Regions_Countries");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Wego.Domain.Entities.TrainShip", b =>
                {
                    b.HasOne("Wego.Domain.Entities.UserProfile", "UserProfile")
                        .WithMany("TrainShips")
                        .HasForeignKey("UserProfileId")
                        .IsRequired()
                        .HasConstraintName("FK__TrainShip__UserP__0ABD916C");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Wego.Domain.Entities.UserVisibility", b =>
                {
                    b.HasOne("Wego.Domain.Entities.UserProfile", "UserProfile")
                        .WithMany("UserVisibilities")
                        .HasForeignKey("UserProfileId")
                        .HasConstraintName("FK__UserVisib__userP__0BB1B5A5");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Wego.Domain.Entities.Category", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Wego.Domain.Entities.ContractType", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Wego.Domain.Entities.Country", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("Wego.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Wego.Domain.Entities.Document", b =>
                {
                    b.Navigation("DocVisibility");
                });

            modelBuilder.Entity("Wego.Domain.Entities.ExperienceYear", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Wego.Domain.Entities.Region", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Wego.Domain.Entities.UserProfile", b =>
                {
                    b.Navigation("Document");

                    b.Navigation("Experiences");

                    b.Navigation("Languages");

                    b.Navigation("TrainShips");

                    b.Navigation("UserVisibilities");
                });

            modelBuilder.Entity("Wego.Domain.Entities.WorkType", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Wego.Domain.Entities.ZipCode", b =>
                {
                    b.Navigation("City");

                    b.Navigation("Offers");
                });
#pragma warning restore 612, 618
        }
    }
}
